import csv
from datetime import datetime
import os
import sys

class AnaliseAcoesApp:
    CSV_FILE = "resultados_analise.csv"
    
    def __init__(self):
        self.analise = AnaliseAcao(self.CSV_FILE)
        self.analise.criar_cabecalho_se_necessario()
    
    def run(self):
        while True:
            self.mostrar_menu()
            escolha = input("Escolha uma op√ß√£o: ")
            
            if escolha == "1":
                self.calcular_pvpa()
            elif escolha == "2":
                self.analisar_pvpa()
            elif escolha == "3":
                self.calcular_pl()
            elif escolha == "4":
                self.analisar_pl()
            elif escolha == "5":
                self.calcular_dy()
            elif escolha == "6":
                self.analisar_dy()
            elif escolha == "7":
                self.calcular_valor_intrinseco()
            elif escolha == "8":
                self.analisar_valor_intrinseco()
            elif escolha == "9":
                self.calcular_rsi()
            elif escolha == "10":
                self.analisar_rsi()
            elif escolha == "11":
                self.analise.mostrar_resultados()
            elif escolha == "12":
                self.mostrar_ajuda()
            elif escolha == "13":
                self.sair_programa()
            elif escolha == "14":
                self.fechar_programa()
            else:
                print("\033[31m‚ùå Op√ß√£o inv√°lida. Tente novamente.\033[0m")
    
    def mostrar_menu(self):
        print("\n\033[36m--- üìä Menu de An√°lise de A√ß√µes ---\033[0m")
        print("1. Calcular PVP-PA")
        print("2. Analisar PVP-PA (j√° calculado)")
        print("3. Calcular P/L")
        print("4. Analisar P/L (j√° calculado)")
        print("5. Calcular Dividend Yield")
        print("6. Analisar Dividend Yield (j√° calculado)")
        print("7. Calcular Valor Intr√≠nseco")
        print("8. Analisar Valor Intr√≠nseco (j√° calculado)")
        print("9. Calcular RSI")
        print("10. Analisar RSI (j√° calculado)")
        print("11. Ver Hist√≥rico de An√°lises")
        print("12. Saber o que cada op√ß√£o faz")
        print("13. Sair")
        print("14. Fechar Programa")
    
    def mostrar_ajuda(self):
        print("\n\033[36m--- üìñ Ajuda para as op√ß√µes ---\033[0m")
        print("1. Calcular PVP-PA: Analisa se a a√ß√£o est√° subvalorizada ou supervalorizada a partir dos dados.")
        print("2. Analisar PVP-PA: Forne√ßa o valor j√° calculado e obtenha a recomenda√ß√£o.")
        print("3. Calcular P/L: Verifica se a a√ß√£o est√° barata, com pre√ßo justo ou cara a partir dos dados.")
        print("4. Analisar P/L: Forne√ßa o P/L j√° calculado e veja a an√°lise.")
        print("5. Calcular Dividend Yield: Informa o rendimento em dividendos da a√ß√£o a partir dos dados.")
        print("6. Analisar Dividend Yield: Forne√ßa o DY j√° calculado e obtenha a interpreta√ß√£o.")
        print("7. Calcular Valor Intr√≠nseco: Determina o valor real da a√ß√£o com base em dividendos esperados.")
        print("8. Analisar Valor Intr√≠nseco: Compare valor intr√≠nseco estimado e pre√ßo atual.")
        print("9. Calcular RSI: Indica se a a√ß√£o est√° sobrecomprada, sobrevendida ou neutra a partir dos dados.")
        print("10. Analisar RSI: Forne√ßa o RSI j√° calculado e veja a recomenda√ß√£o.")
        print("11. Ver Hist√≥rico de An√°lises: Mostra resultados salvos em CSV.")
        print("12. Saber o que cada op√ß√£o faz: Mostra esta ajuda.")
    
    def obter_double(self, mensagem):
        while True:
            try:
                entrada = input(f"\033[33m{mensagem}\033[0m").replace(",", ".")
                return float(entrada)
            except ValueError:
                print("\033[31m‚ùå Erro: Digite um n√∫mero v√°lido.\033[0m")
    
    def perguntar_salvar(self):
        while True:
            resposta = input("\033[33mDeseja salvar o resultado no arquivo CSV? (s/n): \033[0m").strip().lower()
            if resposta == "s":
                return True
            elif resposta == "n":
                return False
            print("\033[31m‚ùå Resposta inv√°lida. Digite 's' ou 'n'.\033[0m")
    
    # ------------------- CALCULAR -------------------------
    
    def calcular_pvpa(self):
        preco = self.obter_double("Digite o pre√ßo da a√ß√£o: ")
        vp = self.obter_double("Digite o valor patrimonial da a√ß√£o: ")
        if vp <= 0:
            print("\033[31mErro: O valor patrimonial deve ser maior que zero.\033[0m")
            return
        pvpa = preco / vp
        status = "subvalorizada" if pvpa < 1 else "com pre√ßo justo" if pvpa == 1 else "supervalorizada"
        resultado = f"üìä PVP-PA: {pvpa:.2f} ‚Üí A a√ß√£o est√° {status}."
        print(f"\033[32m{resultado}\033[0m")
        if self.perguntar_salvar():
            self.analise.adicionar_resultado("Calcular PVP-PA", resultado)
    
    def calcular_pl(self):
        preco = self.obter_double("Digite o pre√ßo da a√ß√£o: ")
        lpa = self.obter_double("Digite o lucro por a√ß√£o (LPA): ")
        if lpa <= 0:
            print("\033[31mErro: O LPA deve ser maior que zero.\033[0m")
            return
        pl = preco / lpa
        status = "barata" if pl < 10 else "com pre√ßo justo" if pl <= 20 else "cara"
        resultado = f"üìà P/L: {pl:.2f} ‚Üí A a√ß√£o est√° {status}."
        print(f"\033[32m{resultado}\033[0m")
        if self.perguntar_salvar():
            self.analise.adicionar_resultado("Calcular P/L", resultado)
    
    def calcular_dy(self):
        dividendos = self.obter_double("Digite os dividendos anuais por a√ß√£o: ")
        preco = self.obter_double("Digite o pre√ßo da a√ß√£o: ")
        if preco <= 0:
            print("\033[31mErro: O pre√ßo da a√ß√£o deve ser maior que zero.\033[0m")
            return
        dy = (dividendos / preco) * 100
        status = "um bom rendimento" if dy > 5 else "um rendimento baixo"
        resultado = f"üí∞ Dividend Yield: {dy:.2f}% ‚Üí A a√ß√£o tem {status}."
        print(f"\033[32m{resultado}\033[0m")
        if self.perguntar_salvar():
            self.analise.adicionar_resultado("Calcular Dividend Yield", resultado)
    
    def calcular_valor_intrinseco(self):
        dividendo = self.obter_double("Digite o dividendo esperado: ")
        taxa_desconto = self.obter_double("Digite a taxa de desconto (ex: 0.10 para 10%): ")
        taxa_crescimento = self.obter_double("Digite a taxa de crescimento (ex: 0.02 para 2%): ")
        if taxa_desconto <= taxa_crescimento:
            print("\033[31mErro: A taxa de desconto deve ser maior que a taxa de crescimento.\033[0m")
            return
        valor = dividendo / (taxa_desconto - taxa_crescimento)
        resultado = f"üíé Valor Intr√≠nseco: R$ {valor:.2f}"
        print(f"\033[32m{resultado}\033[0m")
        if self.perguntar_salvar():
            self.analise.adicionar_resultado("Calcular Valor Intr√≠nseco", resultado)
    
    def calcular_rsi(self):
        ganhos = self.obter_double("Digite os ganhos m√©dios: ")
        perdas = self.obter_double("Digite as perdas m√©dias: ")
        if perdas == 0:
            resultado = "üìä RSI: 100 ‚Üí A a√ß√£o est√° sobrecomprada."
        else:
            rs = ganhos / perdas
            rsi = 100 - (100 / (1 + rs))
            status = "sobrecomprada" if rsi > 70 else "sobrevendida" if rsi < 30 else "em zona neutra"
            resultado = f"üìä RSI: {rsi:.2f} ‚Üí A a√ß√£o est√° {status}."
        print(f"\033[32m{resultado}\033[0m")
        if self.perguntar_salvar():
            self.analise.adicionar_resultado("Calcular RSI", resultado)
    
    # ------------------- ANALISAR -------------------------
    
    def analisar_pvpa(self):
        pvpa = self.obter_double("Digite o valor j√° calculado do PVP-PA: ")
        if pvpa < 1:
            status = "subvalorizada ‚Üí bom potencial de valoriza√ß√£o. Interessante para compra."
        elif pvpa == 1:
            status = "com pre√ßo justo ‚Üí avalie outros fundamentos."
        else:
            status = "supervalorizada ‚Üí potencial limitado ou sobrevaloriza√ß√£o. Aten√ß√£o antes de comprar."
        resultado = f"üìä PVP-PA: {pvpa:.2f} ‚Üí {status}"
        print(f"\033[32m{resultado}\033[0m")
        if self.perguntar_salvar():
            self.analise.adicionar_resultado("Analisar PVP-PA", resultado)
    
    def analisar_pl(self):
        pl = self.obter_double("Digite o valor j√° calculado do P/L: ")
        if pl < 10:
            status = "barata ‚Üí bom potencial de alta, interessante para compra."
        elif pl <= 20:
            status = "com pre√ßo justo ‚Üí avalie outros indicadores antes de comprar."
        else:
            status = "cara ‚Üí pode estar supervalorizada. Avalie o risco antes de entrar."
        resultado = f"üìà P/L: {pl:.2f} ‚Üí {status}"
        print(f"\033[32m{resultado}\033[0m")
        if self.perguntar_salvar():
            self.analise.adicionar_resultado("Analisar P/L", resultado)
    
    def analisar_dy(self):
        dy = self.obter_double("Digite o valor j√° calculado do Dividend Yield (em %): ")
        status = "um bom rendimento ‚Üí interessante para quem busca renda passiva." if dy > 5 else "um rendimento baixo ‚Üí avalie se o crescimento compensa o DY mais baixo."
        resultado = f"üí∞ Dividend Yield: {dy:.2f}% ‚Üí A a√ß√£o tem {status}"
        print(f"\033[32m{resultado}\033[0m")
        if self.perguntar_salvar():
            self.analise.adicionar_resultado("Analisar Dividend Yield", resultado)
    
    def analisar_valor_intrinseco(self):
        valor_intrinseco = self.obter_double("Digite o valor intr√≠nseco estimado: R$ ")
        preco_mercado = self.obter_double("Digite o pre√ßo de mercado atual: R$ ")
        if valor_intrinseco > preco_mercado:
            status = "A a√ß√£o est√° abaixo do valor intr√≠nseco ‚Üí potencial de valoriza√ß√£o. Interessante para compra."
        else:
            status = "A a√ß√£o est√° acima ou no valor intr√≠nseco ‚Üí crescimento limitado. Avalie bem antes de comprar."
        resultado = f"üíé Valor Intr√≠nseco: R$ {valor_intrinseco:.2f} vs Pre√ßo de Mercado: R$ {preco_mercado:.2f} ‚Üí {status}"
        print(f"\033[32m{resultado}\033[0m")
        if self.perguntar_salvar():
            self.analise.adicionar_resultado("Analisar Valor Intr√≠nseco", resultado)
    
    def analisar_rsi(self):
        rsi = self.obter_double("Digite o valor j√° calculado do RSI: ")
        if rsi > 70:
            status = "sobrecomprada ‚Üí melhor aguardar uma corre√ß√£o antes de comprar."
        elif rsi < 30:
            status = "sobrevendida ‚Üí pode ser oportunidade de compra."
        else:
            status = "em zona neutra ‚Üí sem sinais fortes de compra ou venda."
        resultado = f"üìä RSI: {rsi:.2f} ‚Üí A a√ß√£o est√° {status}"
        print(f"\033[32m{resultado}\033[0m")
        if self.perguntar_salvar():
            self.analise.adicionar_resultado("Analisar RSI", resultado)
    
    def sair_programa(self):
        print("\033[31müîö Saindo do programa...\033[0m")
        sys.exit(0)
    
    def fechar_programa(self):
        print("\033[31m‚ùå Fechando imediatamente.\033[0m")
        sys.exit(0)

class AnaliseAcao:
    def __init__(self, arquivo):
        self.arquivo = arquivo
    
    def criar_cabecalho_se_necessario(self):
        if not os.path.exists(self.arquivo):
            with open(self.arquivo, mode='w', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerow(["Data", "Op√ß√£o", "Resultado"])
    
    def adicionar_resultado(self, opcao, resultado):
        data = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(self.arquivo, mode='a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow([data, opcao, resultado.replace(",", " ")])
    
    def mostrar_resultados(self):
        if not os.path.exists(self.arquivo):
            print("\033[33mN√£o h√° resultados para exibir.\033[0m")
            return
        
        print("\n\033[36m--- Hist√≥rico de An√°lises ---\033[0m")
        with open(self.arquivo, mode='r', encoding='utf-8') as file:
            reader = csv.reader(file)
            next(reader)  # Pular cabe√ßalho
            for linha in reader:
                print(f"\033[32m{', '.join(linha)}\033[0m")

if __name__ == "__main__":
    app = AnaliseAcoesApp()
    app.run()
